<?php

/**
 * Implementation of hook_help().
 */
function bot_pandora_help($path, $arg) {
  switch ($path) {
    case 'irc:features':
      return array(t('Pandorabot'));
    case 'irc:features#pandorabot':
      return t('For the moment, call me and add ! or ? at the end');
    case 'admin/settings/bot/pandora':
      return '<p>' . t('Configure pandorabot with these settings.') . '</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function bot_pandora_menu() {
  $items['admin/settings/bot/pandora'] = array(
    'access arguments'  => array('administer bot'),
    'description'       => 'Configure pandorabot with these settings.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bot_pandora_settings'),
    'title'             => 'Bot Pandora',
  );

  return $items;
}

/**
 * Configures pandora learning.
 */
function bot_pandora_settings() {
  $form['bot_pandora_botid'] = array(
    '#default_value' => variable_get('bot_pandora_botid', '0'),
    '#description'   => t('Enter the bot id given by the pandorabots server.'),
    '#title'         => t('BotId'),
    '#type'          => 'textfield',
  );

  return system_settings_form($form);
}

/**
 * Listen for conversation directed at, or about, the bot.
 *
 * @param $data
 *   The regular $data object prepared by the IRC library.
 * @param $from_query
 *   Boolean; whether this was a queried request.
 */
function bot_pandora_irc_msg_channel($data, $from_query = FALSE) {
  $to = $from_query ? $data->nick : $data->channel;
  $addressed = bot_name_regexp();

  if (preg_match("/^[!\?]($addressed)?(.*)$/i", $data->message, $matches)) {

    $subject = $matches[3];

    // checks if the nick exists in the base
    
    $custid = db_result(db_query("SELECT custid FROM bot_pandora WHERE nick='%s'", $data->nick));

    // call the pandorabot server
    $pandora_url = "http://www.pandorabots.com/pandora/talk-xml?botid=";
    $pandora_url .= variable_get('bot_pandora_botid', '0');
    $pandora_url .= "&input=". drupal_urlencode($subject). "&custid=". $custid;
    $answer = drupal_http_request($pandora_url);
    if ($answer->code != 200) {
      bot_message($to, $answer->error);
      return;
    }
  
    // parse the answer as simplexml
    $xml = simplexml_load_string($answer->data);
  
    // check if the pandorabot server returned an error
    if ($xml->status != 0) {
      bot_message($to, $xml->message);
      return;
    }
  
    // everything looks fine so get the result and the custid
    $custid = $xml['botid'];
    // save it now (quick!!! before it dissapears !!!)
    bot_pandora_custid_save($data->nick, $custid);
  
    $answer = trim($xml->that);
    // filter some strings
    switch ($answer) {
      case 'Too much recursion in AIML.':
        $answer = t('I was not able to compute your request');
        break;
    }
  
    // return the answer
    bot_message($to, $answer);
  }
  return; // in front of your prefered blog to know what is new

}

/**
 * All responses are available via a query.
 */
function bot_pandora_irc_msg_query($data) {
  bot_pandora_irc_msg_channel($data, TRUE);
}

function bot_pandora_custid_save($nick, $custid) {
  // checks if the nick exists in the base
  $value = db_result(db_query("SELECT custid FROM bot_pandora WHERE nick='%s'", $nick));
  
  if ($value) {
    db_query("UPDATE bot_pandora SET custid='%s' WHERE nick='%s'", array($custid, $nick));
  }
  else {
    db_query("INSERT INTO bot_pandora (nick, custid) VALUES ('%s','%s')", array($nick, $custid));
  }
}
